<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AList-1</title>
    <url>/2025/03/27/AList-1/</url>
    <content><![CDATA[<h1 id="Alist部署指南"><a href="#Alist部署指南" class="headerlink" title="Alist部署指南"></a>Alist部署指南</h1><h2 id="🌟-我的Alist之旅"><a href="#🌟-我的Alist之旅" class="headerlink" title="🌟 我的Alist之旅"></a>🌟 我的Alist之旅</h2><p>曾经，我的Alist只是默默运行在本地电脑上，像一个勤劳的小管家，帮我管理着各种网盘资源：坚果云里收集的文件、蓝奏云中的珍藏资源、百度云上的课程视频…直到有一天我恍然大悟——<strong>这玩意儿可以部署到服务器上啊！</strong> 🚀</p>
<p>现在，我的Alist已经成功”搬家”到云端，不仅访问更方便，服务也更稳定可靠啦！我会在上面分享一些代码文件，不过由于带宽限制，我设置了<strong>10MB文件大小上限</strong>，确保大家都有流畅的体验~</p>
<p>👉 <a href="https://alist.nuyoahming.xyz/">欢迎来我的Alist站点参观</a> 👈</p>
<h2 id="✨-功能亮点"><a href="#✨-功能亮点" class="headerlink" title="✨ 功能亮点"></a>✨ 功能亮点</h2><p>AList是一款强大的文件列表程序，采用Gin和Solidjs构建，拥有以下超能力：</p>
<table>
<thead>
<tr>
<th>功能类别</th>
<th>详细说明</th>
</tr>
</thead>
<tbody><tr>
<td>📌 基础特性</td>
<td>简单易用、支持明暗模式切换、路径密码保护</td>
</tr>
<tr>
<td>☁️ 存储支持</td>
<td>本地存储&#x2F;阿里云盘&#x2F;夸克云盘&#x2F;坚果云等，支持WebDAV协议</td>
</tr>
<tr>
<td>🔍 文件预览</td>
<td>视频&#x2F;音频&#x2F;文档&#x2F;PDF&#x2F;图片&#x2F;IPA安装包全支持</td>
</tr>
<tr>
<td>⚡ 下载功能</td>
<td>浏览器打包下载、Aria2批量下载、离线下载</td>
</tr>
<tr>
<td>🔒 安全特性</td>
<td>单点登录、自动注册、保险箱文件加密</td>
</tr>
<tr>
<td>🛠️ 其他工具</td>
<td>文本编辑器、README渲染、永久链接、Cloudflare代理</td>
</tr>
</tbody></table>
<h2 id="🛠️-安装指南（宝塔面板版）"><a href="#🛠️-安装指南（宝塔面板版）" class="headerlink" title="🛠️ 安装指南（宝塔面板版）"></a>🛠️ 安装指南（宝塔面板版）</h2><h3 id="第一步：创建网站"><a href="#第一步：创建网站" class="headerlink" title="第一步：创建网站"></a>第一步：创建网站</h3><ol>
<li>登录宝塔面板</li>
<li>点击”网站” → “添加站点”</li>
<li>填写域名</li>
<li>设置根目录（示例：<code>/www/wwwroot/alist</code>）</li>
<li>PHP版本选择”纯静态”</li>
<li>其他保持默认</li>
</ol>
<p><img src="/images/Alist-1.1.jpg" alt="创建网站示意图"></p>
<h3 id="第二步：一键安装"><a href="#第二步：一键安装" class="headerlink" title="第二步：一键安装"></a>第二步：一键安装</h3><p>在服务器终端执行以下魔法命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> -o v3.sh &amp;&amp; bash v3.sh install /www/wwwroot/alist</span><br></pre></td></tr></table></figure>

<p>💡 安装完成后会显示管理员账号密码，<strong>务必记好</strong>！</p>
<h3 id="第三步：设置反向代理"><a href="#第三步：设置反向代理" class="headerlink" title="第三步：设置反向代理"></a>第三步：设置反向代理</h3><ol>
<li>进入宝塔面板 → 网站 → 对应站点 → “反向代理”</li>
<li>添加代理：<ul>
<li>代理名称：alist</li>
<li>目标URL：<code>http:/你的服务器的公网IP:5244</code></li>
</ul>
</li>
</ol>
<p><img src="/images/Alist-1.2.jpg" alt="反向代理设置示意图"></p>
<h3 id="第四步：HTTPS加密"><a href="#第四步：HTTPS加密" class="headerlink" title="第四步：HTTPS加密"></a>第四步：HTTPS加密</h3><p>在宝塔面板中为站点申请免费的SSL证书，一键开启安全访问！</p>
<h2 id="🎁-小贴士"><a href="#🎁-小贴士" class="headerlink" title="🎁 小贴士"></a>🎁 小贴士</h2><ul>
<li>本地存储设置后即可预览文件</li>
<li>PDF预览问题解决方案：<ol>
<li>尝试关闭IDM下载器</li>
<li>在设置中将PDF预览链接从<code>$e_url</code>改为<code>$durl</code></li>
</ol>
</li>
</ul>
<p>遇到其他问题？欢迎来我的Alist站点留言交流~ 🤗</p>
<hr>
<blockquote>
<p>最后更新：2023年10月<br>祝您部署顺利！如有问题，星光不负赶路人 ✨</p>
</blockquote>
]]></content>
      <categories>
        <category>AList</category>
      </categories>
      <tags>
        <tag>AList</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置代理</title>
    <url>/2025/03/23/git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>几行命令就能搞定</p>
<h2 id="1、查看-Git-全局配置项"><a href="#1、查看-Git-全局配置项" class="headerlink" title="1、查看 Git 全局配置项"></a>1、查看 Git 全局配置项</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">config</span> <span class="comment">--global -l</span></span><br></pre></td></tr></table></figure>
<h2 id="2、设置-http、https-全局代理"><a href="#2、设置-http、https-全局代理" class="headerlink" title="2、设置 http、https 全局代理"></a>2、设置 http、https 全局代理</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> http<span class="selector-class">.proxy</span> http:<span class="comment">//127.0.0.1:7890</span></span><br><span class="line">git config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> https:<span class="comment">//127.0.0.1:7890</span></span><br></pre></td></tr></table></figure>
<p>这里的7890改成你自己的http代理，如果你是用的是V2ray的haul应该是在左下角，类似于这样<code>[http:7890]</code></p>
<h2 id="3、取消-http、https-全局代理"><a href="#3、取消-http、https-全局代理" class="headerlink" title="3、取消 http、https 全局代理"></a>3、取消 http、https 全局代理</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> http<span class="selector-class">.proxy</span></span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<h2 id="4、除了全局代理外，我们还可以针对单个仓库添加局部代理"><a href="#4、除了全局代理外，我们还可以针对单个仓库添加局部代理" class="headerlink" title="4、除了全局代理外，我们还可以针对单个仓库添加局部代理"></a>4、除了全局代理外，我们还可以针对单个仓库添加局部代理</h2><p>首先，切换到需要设置代理的git仓库目录下，然后执行以下命令：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">git config http.proxy http:<span class="comment">//127.0.0.1:7890</span></span><br></pre></td></tr></table></figure>
<p>该命令执行后，该git仓库下所有的git命令都会通过设置的代理服务器进行网络访问。</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/weixin_44296929/article/details/111242452">https://blog.csdn.net/weixin_44296929/article/details/111242452</a></p>
<p><a href="https://blog.csdn.net/qq_37544121/article/details/120137996">https://blog.csdn.net/qq_37544121/article/details/120137996</a></p>
]]></content>
      <categories>
        <category>git</category>
        <category>代理配置</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>代理配置</tag>
      </tags>
  </entry>
  <entry>
    <title>git分支处理指北</title>
    <url>/2025/03/25/git%E5%88%86%E6%94%AF%E5%A4%84%E7%90%86%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<h1 id="Git-分支管理：为什么、如何使用，以及最佳实践"><a href="#Git-分支管理：为什么、如何使用，以及最佳实践" class="headerlink" title="Git 分支管理：为什么、如何使用，以及最佳实践"></a>Git 分支管理：为什么、如何使用，以及最佳实践</h1><p>Git 是当前最流行的分布式版本控制系统，广泛应用于开发团队中进行源代码管理。与其说 Git 是一个简单的版本控制工具，不如说它是开发人员的强大助手，尤其是在分支管理方面。Git 的分支操作允许我们并行开发，保持代码整洁，避免互相干扰，从而提高开发效率。在这篇文章中，我们将深入探讨 Git 分支的基本概念、操作流程以及一些最佳实践，帮助你更好地理解如何高效地管理 Git 分支。</p>
<h2 id="为什么要使用-Git-分支？"><a href="#为什么要使用-Git-分支？" class="headerlink" title="为什么要使用 Git 分支？"></a>为什么要使用 Git 分支？</h2><h3 id="1-并行开发"><a href="#1-并行开发" class="headerlink" title="1. 并行开发"></a>1. 并行开发</h3><p>分支是 Git 中非常强大的功能，它允许多个开发人员同时进行不同的任务而不影响彼此的工作。例如，开发人员可以在一个分支上修复 bug，另一个开发人员可以在另一个分支上实现新功能，而主分支（通常是 <code>main</code> 或 <code>master</code>）依然保持稳定。完成工作后，通过合并（merge）操作，可以将各自的工作成果合并到主分支上。</p>
<h3 id="2-代码隔离与安全"><a href="#2-代码隔离与安全" class="headerlink" title="2. 代码隔离与安全"></a>2. 代码隔离与安全</h3><p>在没有分支的情况下，开发人员可能会直接在主分支上进行工作，这样一旦开发过程中出现问题，就可能会影响到其他开发人员或者是生产环境。而通过创建独立的分支来开发新功能或者修复 bug，可以有效避免这类问题。分支的存在使得每个功能的开发是隔离的，直到完成并且经过测试后再合并到主分支中。</p>
<h3 id="3-提高协作效率"><a href="#3-提高协作效率" class="headerlink" title="3. 提高协作效率"></a>3. 提高协作效率</h3><p>分支让团队成员能够更加高效地协作。每个开发者都可以在自己的分支上进行开发，互不干扰。当某个开发者的工作完成时，只需要将该分支合并回主分支或其他适当的分支，所有的修改就会统一汇聚到一起，而无需担心代码冲突。</p>
<h3 id="4-版本管理与发布"><a href="#4-版本管理与发布" class="headerlink" title="4. 版本管理与发布"></a>4. 版本管理与发布</h3><p>通过 Git 分支，你可以灵活地管理不同的版本。例如，你可以为每个发布版本创建一个分支，在该分支上进行 bug 修复和功能调整，发布完成后再合并到主分支。同时，开发人员也可以继续在其他分支上进行新功能的开发，确保开发过程的连续性。</p>
<h2 id="Git-分支操作详解"><a href="#Git-分支操作详解" class="headerlink" title="Git 分支操作详解"></a>Git 分支操作详解</h2><p>在了解了为什么要使用 Git 分支之后，接下来我们详细介绍 Git 分支的常用操作，包括创建、切换、合并、删除分支等。</p>
<h3 id="1-创建分支"><a href="#1-创建分支" class="headerlink" title="1. 创建分支"></a>1. 创建分支</h3><p>要开始使用 Git 分支，首先需要创建一个新的分支。你可以使用 <code>git branch</code> 命令来创建一个新分支。例如，如果你想创建一个名为 <code>feature-xyz</code> 的分支，可以运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch feature-xyz</span><br></pre></td></tr></table></figure>

<p>这条命令会创建一个名为 <code>feature-xyz</code> 的分支，但它不会切换到这个分支。你仍然处于当前分支(如果你是在master分支下运行的话你现在还在master下)上。</p>
<p>如果你希望在创建分支的同时切换到该分支，可以使用 <code>git checkout -b</code> 命令，或者在较新的 Git 版本中，使用 <code>git switch</code> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b feature-xyz</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git switch -c feature-xyz</span><br></pre></td></tr></table></figure>

<p>这将创建 <code>feature-xyz</code> 分支，并自动切换到该分支。</p>
<h3 id="2-切换分支"><a href="#2-切换分支" class="headerlink" title="2. 切换分支"></a>2. 切换分支</h3><p>当你创建了多个分支之后，可能需要在它们之间切换。切换分支可以通过 <code>git checkout</code> 或 <code>git switch</code> 命令来实现。</p>
<p>如果你已经有了 <code>feature-xyz</code> 分支并希望切换到它，可以运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout feature-xyz</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git switch feature-xyz</span><br></pre></td></tr></table></figure>

<p>这将使得当前工作目录切换到 <code>feature-xyz</code> 分支。需要注意的是，Git 会检查你当前的工作目录是否有未提交的更改，如果有，Git 会提示你先提交更改或进行其他操作，以避免丢失修改。</p>
<h3 id="3-查看分支"><a href="#3-查看分支" class="headerlink" title="3. 查看分支"></a>3. 查看分支</h3><p>你可以使用 <code>git branch</code> 命令查看所有本地分支。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>此命令将列出所有本地分支，并用 <code>*</code> 标记当前所在的分支。如果你想查看远程分支，可以使用 <code>-r</code> 选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<p>如果你想查看本地和远程的所有分支，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h3 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4. 合并分支"></a>4. 合并分支</h3><p>分支的真正魅力在于它的合并（merge）功能。合并分支允许你将两个分支的工作合并到一起。</p>
<p>假设你已经在 <code>feature-xyz</code> 分支上完成了某个功能开发，现在需要将它合并到 <code>main</code> 分支。首先，切换到目标分支 <code>main</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout main</span><br></pre></td></tr></table></figure>

<p>然后，使用 <code>git merge</code> 命令将 <code>feature-xyz</code> 分支的更改合并到 <code>main</code> 分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge feature-xyz</span><br></pre></td></tr></table></figure>

<p>如果合并没有冲突，Git 会自动将两者的更改整合在一起。若存在冲突，Git 会提示你手动解决冲突，通常是通过编辑冲突文件，选择保留哪些更改，最后标记为已解决并提交合并。</p>
<h3 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5. 删除分支"></a>5. 删除分支</h3><p>当一个分支的工作完成并且已经合并到主分支之后，通常需要删除该分支以保持仓库的整洁。你可以使用 <code>git branch -d</code> 命令来删除本地分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d feature-xyz</span><br></pre></td></tr></table></figure>

<p>如果分支没有完全合并，<code>git branch -d</code> 会阻止删除操作，防止丢失未合并的工作。如果你确定要删除该分支，可以使用 <code>-D</code> 强制删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D feature-xyz</span><br></pre></td></tr></table></figure>

<p>删除远程分支可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --delete feature-xyz</span><br></pre></td></tr></table></figure>

<h3 id="6-推送和拉取分支"><a href="#6-推送和拉取分支" class="headerlink" title="6. 推送和拉取分支"></a>6. 推送和拉取分支</h3><h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h4><p>如果你在本地创建了一个新分支，并希望将其推送到远程仓库，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin feature-xyz</span><br></pre></td></tr></table></figure>

<p>这将把 <code>feature-xyz</code> 分支推送到远程仓库，并建立本地和远程分支之间的追踪关系。</p>
<h4 id="拉取分支"><a href="#拉取分支" class="headerlink" title="拉取分支"></a>拉取分支</h4><p>当其他人将更改推送到远程分支时，你需要拉取这些更改。你可以使用以下命令从远程仓库拉取最新的分支更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin feature-xyz</span><br></pre></td></tr></table></figure>

<h4 id="大致流程示例"><a href="#大致流程示例" class="headerlink" title="大致流程示例"></a>大致流程示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout back || git checkout -b back  <span class="comment"># 切换或创建分支back</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;修改描述&quot;</span> <span class="comment">#填入你写的修改描述</span></span><br><span class="line"><span class="comment"># git pull origin back  可选，推荐先拉取</span></span><br><span class="line">git push origin back  <span class="comment"># 首次推送用 git push -u origin back</span></span><br></pre></td></tr></table></figure>

<h2 id="Git-分支的最佳实践"><a href="#Git-分支的最佳实践" class="headerlink" title="Git 分支的最佳实践"></a>Git 分支的最佳实践</h2><ol>
<li><strong>保持主分支干净</strong>：所有功能开发应该在独立的分支上进行，确保主分支始终保持可用和稳定。</li>
<li><strong>频繁合并</strong>：定期将其他分支的更改合并到你的分支中，避免冲突积累得太多。</li>
<li><strong>小而频繁的提交</strong>：尽量避免在分支上进行大规模的开发，应该进行小而频繁的提交，这样在合并时更容易解决冲突。</li>
<li><strong>命名规范</strong>：为分支命名时，建议采用清晰且一致的命名规则，例如 <code>feature/xyz</code>、<code>bugfix/abc</code> 等。</li>
</ol>
<h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>不想敲了直接上图<br><img src="/images/git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86-1.png" alt="合并冲突-1"><br><img src="/images/git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86-2.png" alt="合并冲突-2"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Git 的分支管理功能为开发团队提供了极大的灵活性和效率，能够帮助我们在独立的环境中进行并行开发、代码隔离和协作。通过合理地使用 Git 分支，不仅能够减少开发中的冲突，还能使代码版本管理更加清晰规范。掌握了 Git 分支的基本操作和最佳实践，你将能够在日常开发中更加高效地工作，同时确保项目的稳定性和可维护性。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>大黑山程序猿养殖基地</title>
    <url>/2024/12/29/hello-world/</url>
    <content><![CDATA[<p>堂堂985大学，辽宁省第一学府，吃食堂居然能食物中毒。。。</p>
]]></content>
      <categories>
        <category>吐槽</category>
      </categories>
      <tags>
        <tag>萌新</tag>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>Uniapp-1</title>
    <url>/2025/03/26/Uniapp-1/</url>
    <content><![CDATA[<h1 id="🚀-为什么微信小程序不能使用-Axios？及最佳解决方案"><a href="#🚀-为什么微信小程序不能使用-Axios？及最佳解决方案" class="headerlink" title="🚀 为什么微信小程序不能使用 Axios？及最佳解决方案"></a>🚀 为什么微信小程序不能使用 Axios？及最佳解决方案</h1><p>在微信小程序开发中，许多开发者习惯使用 <code>Axios</code> 进行 HTTP 请求，却常常遇到兼容性问题。本文将深入分析原因，并介绍更优的解决方案。</p>
<h2 id="🔍-为什么微信小程序不能使用-Axios？"><a href="#🔍-为什么微信小程序不能使用-Axios？" class="headerlink" title="🔍 为什么微信小程序不能使用 Axios？"></a>🔍 为什么微信小程序不能使用 Axios？</h2><h3 id="1-运行环境差异"><a href="#1-运行环境差异" class="headerlink" title="1. 运行环境差异"></a>1. 运行环境差异</h3><div class="comparison-card">
  <div class="env-card browser">
    <h3>浏览器环境</h3>
    <ul>
      <li>✅ 支持 XMLHttpRequest</li>
      <li>✅ 支持 Promise</li>
      <li>✅ 完整 ES6+ 支持</li>
    </ul>
  </div>
  <div class="env-card mini-program">
    <h3>小程序环境</h3>
    <ul>
      <li>❌ 无 XMLHttpRequest</li>
      <li>⚠️ 有限 Promise 支持</li>
      <li>⚠️ 受限的 JavaScript 环境</li>
    </ul>
  </div>
</div>

<h3 id="2-核心限制因素"><a href="#2-核心限制因素" class="headerlink" title="2. 核心限制因素"></a>2. 核心限制因素</h3><ul>
<li><strong>网络请求机制不同</strong>：<ul>
<li><code>Axios</code> 基于浏览器 <code>XMLHttpRequest</code></li>
<li>小程序使用自研 <code>wx.request</code> API</li>
</ul>
</li>
<li><strong>Promise 支持差异</strong>：<ul>
<li><code>Axios</code> 重度依赖 Promise</li>
<li>小程序早期版本 Promise 支持不完善</li>
</ul>
</li>
<li><strong>模块系统不兼容</strong>：<ul>
<li><code>Axios</code> 使用 Node.js 核心模块</li>
<li>小程序无 Node.js 运行环境</li>
</ul>
</li>
</ul>
<h2 id="💡-完美解决方案：uni-request"><a href="#💡-完美解决方案：uni-request" class="headerlink" title="💡 完美解决方案：uni.request"></a>💡 完美解决方案：uni.request</h2><h3 id="🎯-为什么选择-uni-request？"><a href="#🎯-为什么选择-uni-request？" class="headerlink" title="🎯 为什么选择 uni.request？"></a>🎯 为什么选择 uni.request？</h3><table>
<thead>
<tr>
<th>特性</th>
<th>Axios</th>
<th>uni.request</th>
</tr>
</thead>
<tbody><tr>
<td>小程序兼容性</td>
<td>❌ 不支持</td>
<td>✅ 完美支持</td>
</tr>
<tr>
<td>跨平台能力</td>
<td>⚠️ 有限</td>
<td>✅ 全平台支持</td>
</tr>
<tr>
<td>开发体验</td>
<td>⭐️⭐️⭐️⭐️</td>
<td>⭐️⭐️⭐️⭐️⭐️</td>
</tr>
<tr>
<td>维护成本</td>
<td>高</td>
<td>低</td>
</tr>
</tbody></table>
<h3 id="🛠-使用指南"><a href="#🛠-使用指南" class="headerlink" title="🛠 使用指南"></a>🛠 使用指南</h3><h4 id="基础请求示例"><a href="#基础请求示例" class="headerlink" title="基础请求示例"></a>基础请求示例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET 请求</span></span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据获取成功&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 请求</span></span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/submit&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  <span class="attr">header</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 添加全局 loading</span></span><br><span class="line">  uni.<span class="title function_">showLoading</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;加载中...&#x27;</span> &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">      ...options,</span><br><span class="line">      <span class="attr">complete</span>: <span class="function">() =&gt;</span> uni.<span class="title function_">hideLoading</span>(),</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: reject</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/api/user&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户数据:&#x27;</span>, data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取失败:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="🌟-最佳实践建议"><a href="#🌟-最佳实践建议" class="headerlink" title="🌟 最佳实践建议"></a>🌟 最佳实践建议</h2><ol>
<li><p><strong>封装统一请求层</strong></p>
<ul>
<li>统一错误处理</li>
<li>自动添加认证头</li>
<li>请求&#x2F;响应日志</li>
</ul>
</li>
<li><p><strong>TypeScript 支持</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">data</span>: T</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> request&lt;T&gt;(<span class="attr">options</span>: <span class="title class_">UniApp</span>.<span class="property">RequestOptions</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ApiResponse</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">  <span class="comment">// 实现...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>性能优化</strong></p>
<ul>
<li>合理设置超时时间</li>
<li>使用请求缓存</li>
<li>避免频繁重复请求</li>
</ul>
</li>
</ol>
<h2 id="📚-扩展阅读"><a href="#📚-扩展阅读" class="headerlink" title="📚 扩展阅读"></a>📚 扩展阅读</h2><ul>
<li><a href="https://uniapp.dcloud.io/api/request/request">UniApp 网络请求官方文档</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html">微信小程序网络请求规范</a></li>
<li><a href="https://juejin.cn/post/6844903652881072141">前端请求层设计模式</a></li>
</ul>
<div class="conclusion">
  <h2>🎯 总结</h2>
  <p>虽然 <code>Axios</code> 是优秀的 HTTP 客户端，但在微信小程序环境中，<code>uni.request</code> 才是更合适的选择。它提供了：</p>
  <ul>
    <li>✅ 完美的平台兼容性</li>
    <li>✅ 一致的开发体验</li>
    <li>✅ 强大的功能支持</li>
  </ul>
  <p>立即尝试 <code>uni.request</code>，享受更顺畅的小程序开发体验！</p>
</div>

<style>
.comparison-card {
  display: flex;
  gap: 20px;
  margin: 20px 0;
}
.env-card {
  flex: 1;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}
.browser { border-left: 4px solid #4CAF50; }
.mini-program { border-left: 4px solid #2196F3; }
.conclusion {
  background: #f5f7fa;
  padding: 20px;
  border-radius: 8px;
  margin-top: 30px;
}
</style>
]]></content>
      <categories>
        <category>技术</category>
        <category>Uniapp</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Uniapp</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客插入图片的办法</title>
    <url>/2025/03/24/hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="方法：全局资源文件夹"><a href="#方法：全局资源文件夹" class="headerlink" title="方法：全局资源文件夹"></a>方法：全局资源文件夹</h1><p>在hexo文件夹下的source目录下，新建一个文件夹叫images(名字随意)，将要插入的图片放在该文件夹中。<br>md文档内，使用<code>![图片](图片链接地址 &quot;图片title&quot;)</code>的格式，圆括号内的链接地址写(&#x2F;images&#x2F;name.jpeg)。<br>这里的 &#x2F; 指的是根目录，对于hexo，资源文件的根目录就是source。</p>
<p><img src="/images/1.jpg" alt="图片" title="原神"></p>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>缺点是当文章很多时，各个文章的图片都在同一文件夹，<strong>不便管理</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题增加近期文章侧边栏</title>
    <url>/2025/03/25/next%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E4%BE%A7%E8%BE%B9%E6%A0%8F/</url>
    <content><![CDATA[<h1 id="边栏显示文章列表效果"><a href="#边栏显示文章列表效果" class="headerlink" title="边栏显示文章列表效果"></a>边栏显示文章列表效果</h1><p>挺奇怪next没用提供这样的功能，文章一多一篇篇翻实在是累，还好找到了有人实现最近文章的功能，那么做文章列表也就同理了</p>
<p>我修改过的代码<br>首先是：</p>
<h2 id="sidebar-njk"><a href="#sidebar-njk" class="headerlink" title="sidebar.njk"></a>sidebar.njk</h2><p>路径： <code>/hexo-theme-next/layout/_macro/sidebar.njk</code><br>在最后一个<code>&#123;% endif %&#125;</code>后面加入</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.recent_posts.enable %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:20px; border-style:dotted none none none; padding-top:5px; text-align:left;padding-left: 20px; padding-right: 10px; padding-bottom: 5px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 5px; padding-top: 5px; padding-left: 0px; padding-right: 20px; font-size: 1.6em; argin-right: 5px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 选择合适的icon --&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> theme.recent_posts.icon %&#125;</span><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; theme.recent_posts.icon &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">b</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 0.65em; padding-left: 8px; position: relative; top: -2px;&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; theme.recent_posts.description &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 文章排序规格,-updated 按照文章更新时间倒排 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name">set</span> posts = site.posts.sort(&#x27;-updated&#x27;).toArray() %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 显示20数目的文章 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> posts.slice(&#x27;0&#x27;,&#x27;20&#x27;) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;postsSidebarNumb&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-indent: -1em;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; url_for(post.path) &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">title</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>
<p>出于美观我把一些css代码内嵌进去了其实不推荐这样做（寄</p>
<h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>路径： <code>/hexo-theme-next/_config.yml</code></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 近期文章配置  </span></span><br><span class="line"><span class="params">recent_posts:</span></span><br><span class="line">  <span class="params">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="params">icon:</span> fab fa-markdown</span><br><span class="line">  <span class="params">description:</span> 文章列表</span><br></pre></td></tr></table></figure>
<h2 id="main-styl"><a href="#main-styl" class="headerlink" title="main.styl"></a>main.styl</h2><p>路径：<code>/hexo-theme-next/source/css/main.styl</code><br>是因为我想给文章列表加上计数，直接在css里用伪类做（要不是伪类不能html内嵌写进去我也不写这里</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//侧边栏计数伪类</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">counter-reset</span>: postsSidebarNumbsection; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.postsSidebarNumb</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: postsSidebarNumbsection;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(postsSidebarNumbsection) <span class="string">&quot;: &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/next%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E4%BE%A7%E8%BE%B9%E6%A0%8F-1.png" alt="效果图"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题添加代码块复制功能</title>
    <url>/2025/03/26/next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="Hexo-Next-代码块复制功能"><a href="#Hexo-Next-代码块复制功能" class="headerlink" title="Hexo Next 代码块复制功能"></a>Hexo Next 代码块复制功能</h1><p>在NexT主题的v6.3版本里已经加入了代码复制这个功能，所以如果你刚开始使用NexT，直接升级主题，并在主题配置文件中打开代码复制的开关就好了，如果版本低于6.3你可以参考以下方式自行添加。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在 <code>.\themes\next\source\js\src</code> 目录下新建 <code>clipboard-use.js</code> 文件内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*页面载入完成后，创建复制按钮*/</span></span><br><span class="line">!<span class="keyword">function</span> (<span class="params">e, t, a</span>) &#123;</span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="keyword">var</span> initCopyCode = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> copyHtml = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;  &lt;i class=&quot;fa fa-globe&quot;&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;&lt;/button&gt;&#x27;</span>;</span><br><span class="line">    $(<span class="string">&quot;.highlight&quot;</span>).<span class="title function_">wrap</span>($(<span class="string">&#x27;&lt;div class=&quot;highlight-wrap&quot;&gt;&lt;/div&gt;&#x27;</span>));</span><br><span class="line">    $(<span class="string">&#x27;.highlight-wrap&#x27;</span>).<span class="title function_">prepend</span>(copyHtml);</span><br><span class="line">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> <span class="title class_">ClipboardJS</span>(<span class="string">&#x27;.btn-copy&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="keyword">function</span>(<span class="params">trigger</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> trigger.<span class="property">nextElementSibling</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 成功提示</span></span><br><span class="line">    clipboard.<span class="title function_">on</span>(<span class="string">&#x27;success&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">toastPlug</span>(<span class="string">&#x27;复制成功!&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">initCopyCode</span>();</span><br><span class="line">&#125;(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>
<h2 id="设置复制按钮样式"><a href="#设置复制按钮样式" class="headerlink" title="设置复制按钮样式"></a>设置复制按钮样式</h2><p>在 <code>.\themes\next\source\css\_custom\custom.styl</code> 样式文件中添加下面代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*代码块复制按钮*/</span></span><br><span class="line"><span class="selector-class">.highlight-wrap</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fcfcfc</span>,<span class="number">#eee</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d5d5d5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    -webkit-<span class="attribute">user-select</span>: none;</span><br><span class="line">    -moz-<span class="attribute">user-select</span>: none;</span><br><span class="line">    -ms-<span class="attribute">user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">    -webkit-<span class="attribute">appearance</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: opacity .<span class="number">5s</span> ease-in-out;</span><br><span class="line">    -o-<span class="attribute">transition</span>: opacity .<span class="number">5s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">5s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight-wrap</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-copy</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h2><p>在 <code>.\themes\next\layout\_layout.swig</code> 文件中，添加引用（注：在 swig 末尾或 body 结束标签（）之前添加）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码块复制功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clipboard-use.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：一开始找的添加复制按钮代码,有一点小bug,如果代码块部分内容超出有横向滑动,复制按钮copy就会跟着移动,而不能固定在右上角，此时只需要将复制按钮和<code>highlight</code>部分外层包裹一个元素，设置<code>position:relative</code>即可。</p>
<h2 id="v6-3版本-及以上-添加复制的办法"><a href="#v6-3版本-及以上-添加复制的办法" class="headerlink" title="v6.3版本(及以上)添加复制的办法"></a>v6.3版本(及以上)添加复制的办法</h2><p>打开<code>.\themes\next\_config.yml</code>,找到</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="params">copy_button:</span></span><br><span class="line"><span class="params">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Available values: default | flat | mac</span></span><br><span class="line"><span class="params">style:</span></span><br><span class="line"><span class="comment"># Fold code block</span></span><br></pre></td></tr></table></figure>
<p>把<code>copy_button</code>设置为<code>true</code>即可</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>吐槽一下ctta和刘国梁</title>
    <url>/2024/12/29/%E5%90%90%E6%A7%BD%E4%B8%80%E4%B8%8Bctta%E5%92%8C%E5%88%98%E5%9B%BD%E6%A2%81/</url>
    <content><![CDATA[<h1 id="WTT和刘国梁：别让乒乓球变成“一言堂”！"><a href="#WTT和刘国梁：别让乒乓球变成“一言堂”！" class="headerlink" title="WTT和刘国梁：别让乒乓球变成“一言堂”！"></a>WTT和刘国梁：别让乒乓球变成“一言堂”！</h1><p>樊振东和陈梦选择退出乒乓球世界排名不仅让人质疑WTT的制度问题，还让我们不得不反思一个更深层次的问题：<strong>刘国梁和他的“一言堂”式管理，是否正在毁掉中国乒乓球的黄金时代？</strong></p>
<hr>
<h2 id="一、从张继科到樊振东：顶级选手为什么不被善待？"><a href="#一、从张继科到樊振东：顶级选手为什么不被善待？" class="headerlink" title="一、从张继科到樊振东：顶级选手为什么不被善待？"></a>一、从张继科到樊振东：顶级选手为什么不被善待？</h2><p>刘国梁作为中国乒乓球的管理者和WTT的主席，近年来的一些决策让人无法理解。那些曾经为中国乒乓球立下赫赫战功的选手，却在他的执政下遭遇了不公正对待。</p>
<h3 id="1-张继科的低谷与“放弃”"><a href="#1-张继科的低谷与“放弃”" class="headerlink" title="1. 张继科的低谷与“放弃”"></a>1. <strong>张继科的低谷与“放弃”</strong></h3><p>张继科，这位中国乒乓球历史上最闪耀的“大满贯选手”，在生涯后期却遭遇了种种冷落和资源倾斜。无论是训练资源还是赛事安排，张继科都没有得到应有的支持。更有甚者，在公开场合中刘国梁的“打压式”言论，让张继科的职业生涯雪上加霜。</p>
<p>一个大满贯选手，最后只能用“综艺”维持人气和热度，这样的职业生涯，难道是张继科应得的吗？</p>
<h3 id="2-樊振东：长期被抑制的“龙的传人”"><a href="#2-樊振东：长期被抑制的“龙的传人”" class="headerlink" title="2. 樊振东：长期被抑制的“龙的传人”"></a>2. <strong>樊振东：长期被抑制的“龙的传人”</strong></h3><p>作为当今世界乒坛最强的男单选手，樊振东的经历却让人感到无奈。他明明是综合实力最强的选手，却多次被刘国梁“战略性牺牲”：</p>
<ul>
<li>在一些关键比赛中，樊振东屡屡被安排让出主力位置，为“全队利益”让步。</li>
<li>刘国梁对樊振东过高的赛事要求让他体力透支、心理压力巨大，直接影响了他的竞技状态。</li>
<li>此次樊振东退出排名，更像是对WTT机制和刘国梁“高压式管理”的一次隐性抗议。</li>
</ul>
<h3 id="3-陈梦：打压还是“冷处理”？"><a href="#3-陈梦：打压还是“冷处理”？" class="headerlink" title="3. 陈梦：打压还是“冷处理”？"></a>3. <strong>陈梦：打压还是“冷处理”？</strong></h3><p>作为东京奥运会的女单冠军，陈梦却迟迟未能成为队内的“绝对核心”。相比于孙颖莎、王曼昱的高频率出镜，陈梦的资源似乎一直得不到重视。</p>
<p>这种“冷处理”方式让人质疑刘国梁的公平性：<strong>难道金牌也无法打破选手资源倾斜的局面吗？</strong></p>
<hr>
<h2 id="二、“功勋式管理”的弊端：刘国梁的一言堂"><a href="#二、“功勋式管理”的弊端：刘国梁的一言堂" class="headerlink" title="二、“功勋式管理”的弊端：刘国梁的一言堂"></a>二、“功勋式管理”的弊端：刘国梁的一言堂</h2><h3 id="1-权力过于集中"><a href="#1-权力过于集中" class="headerlink" title="1. 权力过于集中"></a>1. <strong>权力过于集中</strong></h3><p>自从刘国梁成为中国乒乓球协会主席，再到后来成为WTT的领导者，他手握的权力越来越多。但权力集中并不意味着管理效率高，而是让更多的决策缺乏透明性和民主性。</p>
<ul>
<li>刘国梁的很多安排都是“黑箱操作”，选手和教练对赛事的参与感越来越低。</li>
<li>他更像是用“功勋”在固化自己的权力，而不是以真正的公平和制度化管理来推动中国乒乓球的发展。</li>
</ul>
<h3 id="2-唯成绩论与资源分配的不公平"><a href="#2-唯成绩论与资源分配的不公平" class="headerlink" title="2. 唯成绩论与资源分配的不公平"></a>2. <strong>唯成绩论与资源分配的不公平</strong></h3><p>刘国梁的管理风格倾向于“唯成绩论”，但这种唯成绩论并没有公平地分配资源，而是倾向于扶持“话题性”更高的选手。例如，他更倾向于资源倾斜给年轻选手（如孙颖莎），而非奥运冠军陈梦或樊振东。</p>
<hr>
<h2 id="三、刘国梁的问题对乒乓球的未来影响"><a href="#三、刘国梁的问题对乒乓球的未来影响" class="headerlink" title="三、刘国梁的问题对乒乓球的未来影响"></a>三、刘国梁的问题对乒乓球的未来影响</h2><h3 id="1-年轻选手成“工具人”"><a href="#1-年轻选手成“工具人”" class="headerlink" title="1. 年轻选手成“工具人”"></a>1. <strong>年轻选手成“工具人”</strong></h3><p>一些年轻选手表面上得到了更多资源，但实际上更多是被用来制造“话题”和流量。这样的短期策略，可能会让年轻选手早早消耗殆尽，职业生涯受损。</p>
<h3 id="2-乒乓球内部环境恶化"><a href="#2-乒乓球内部环境恶化" class="headerlink" title="2. 乒乓球内部环境恶化"></a>2. <strong>乒乓球内部环境恶化</strong></h3><p>选手之间的关系可能因为资源分配的不公而恶化，队内竞争变得越来越不健康。选手不再是为了共同的国家荣誉而奋斗，而是为了争夺资源和曝光机会而内耗。</p>
<h3 id="3-国际竞争力下降"><a href="#3-国际竞争力下降" class="headerlink" title="3. 国际竞争力下降"></a>3. <strong>国际竞争力下降</strong></h3><p>长远来看，如果中国乒乓球队内部的资源倾斜和管理问题持续存在，很可能会削弱国家队的整体实力，给其他国家制造追赶的机会。</p>
<hr>
<h2 id="四、写在最后"><a href="#四、写在最后" class="headerlink" title="四、写在最后"></a>四、写在最后</h2><p>作为一名普通的乒乓球爱好者，我们希望看到的是公平、公正的竞争环境，而不是“权力游戏”和“一言堂”的权力展示。</p>
<p><strong>刘国梁，你的功勋毋庸置疑，但功勋不能成为你滥用权力的理由。樊振东、陈梦的退出是对不公的抗议，而我们需要的是一个真正为选手、为乒乓球发展的管理者。</strong></p>
<p>让乒乓球回归竞技，而不是流量和话题！</p>
<hr>
<p><strong>WTT的错误是体制问题，而刘国梁的错误是个人问题。只有在体制和个人问题都解决之后，乒乓球才能再次迎来真正的辉煌！</strong></p>
]]></content>
      <categories>
        <category>吐槽</category>
        <category>乒乓球</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
        <tag>乒乓球</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器部署脚本及定时启动</title>
    <url>/2025/03/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E5%8F%8A%E5%AE%9A%E6%97%B6%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>今天，搞定了一个有趣的项目——自动抓取B站视频在线人数排行榜并实时展示在网页上！从爬虫、部署网页，再到设置定时任务，每一步都踩了坑。点击这里访问<a href="https://hotbiliv.nuyoahming.xyz/">B站视频实时在线人数排行榜</a></p>
<h2 id="搭建前端页面"><a href="#搭建前端页面" class="headerlink" title="搭建前端页面"></a>搭建前端页面</h2><p>首先，得有个地方展示数据吧？</p>
<h3 id="动态加载数据："><a href="#动态加载数据：" class="headerlink" title="动态加载数据："></a>动态加载数据：</h3><p>用JavaScript定时请求<code>data.json</code>，让排行榜自动刷新。</p>
<p>💡 小贴士：</p>
<ul>
<li><p>文件权限很重要！如果网页加载不出来，可能是Nginx&#x2F;Apache没有读取权限，试试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 644 index.html  <span class="comment"># 让Web服务器能读</span></span><br><span class="line"><span class="built_in">chmod</span> 755 static/     <span class="comment"># 确保CSS/JS能加载</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="爬虫脚本"><a href="#爬虫脚本" class="headerlink" title="爬虫脚本"></a>爬虫脚本</h2><p>Python爬虫登场！目标是每小时自动抓取B站视频在线人数，存进<code>data.json</code>。</p>
<h3 id="关键技术："><a href="#关键技术：" class="headerlink" title="关键技术："></a>关键技术：</h3><ul>
<li><p><code>requests</code> 发HTTP请求（记得加headers模拟浏览器，不然会被B站反爬）</p>
</li>
<li><p><code>json</code> 模块处理数据，避免手写字符串（容易出错！）</p>
</li>
<li><p>异常处理！网络可能抽风，脚本不能崩：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>💡 小贴士：</p>
<ul>
<li>别太频繁请求，否则可能被封IP！可以加个<code>time.sleep(2)</code>控制节奏。</li>
<li>遵守<code>robots.txt</code>，看看B站允不允许爬（虽然大部分API接口没限制）。</li>
</ul>
<h2 id="服务器部署——让脚本自己跑起来！"><a href="#服务器部署——让脚本自己跑起来！" class="headerlink" title="服务器部署——让脚本自己跑起来！"></a>服务器部署——让脚本自己跑起来！</h2><p>爬虫写好了，但不能每次都手动运行吧？定时任务才是王道！</p>
<h3 id="方法1：Linux-crontab（经典永流传）"><a href="#方法1：Linux-crontab（经典永流传）" class="headerlink" title="方法1：Linux crontab（经典永流传）"></a>方法1：Linux crontab（经典永流传）</h3><p>编辑定时任务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e  <span class="comment"># 编辑定时任务</span></span><br></pre></td></tr></table></figure>

<p>添加一行，让它每小时跑一次：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 * * * * /usr/bin/python3 /path/to/your_script.py &gt;&gt; /var/log/bili_cron.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><code>&gt;&gt; /var/log/bili_cron.log</code>：把输出存到日志文件，方便查错。</p>
<p><code>2&gt;&amp;1</code>：连错误信息也一起记录。</p>
<p>💡 小贴士：</p>
<ul>
<li><p>权限问题：如果脚本无法写入<code>data.json</code>，试试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 664 data.json  <span class="comment"># 让Python脚本能修改</span></span><br><span class="line"><span class="built_in">chown</span> www-data:www-data data.json  <span class="comment"># 如果是Web服务器用户（如Nginx）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>测试cron是否生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/syslog | grep CRON  <span class="comment"># 看cron有没有真的执行</span></span><br></pre></td></tr></table></figure>

<h3 id="方法2：Systemd-Timer（更现代的选择）"><a href="#方法2：Systemd-Timer（更现代的选择）" class="headerlink" title="方法2：Systemd Timer（更现代的选择）"></a>方法2：Systemd Timer（更现代的选择）</h3><p>如果觉得cron太老派，可以用systemd：</p>
<p>创建服务文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/systemd/system/bili_crawler.service</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=B站数据爬取服务</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/python3 /path/to/your_script.py</span><br><span class="line"><span class="attr">User</span>=www-data  <span class="comment"># 用Web服务器用户运行</span></span><br></pre></td></tr></table></figure>

<p>创建定时器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/systemd/system/bili_crawler.timer</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=每小时跑一次B站爬虫</span><br><span class="line"></span><br><span class="line"><span class="section">[Timer]</span></span><br><span class="line"><span class="attr">OnCalendar</span>=hourly  <span class="comment"># 每小时一次</span></span><br><span class="line"><span class="attr">Persistent</span>=<span class="literal">true</span>    <span class="comment"># 如果服务器关机，下次启动会补跑</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=timers.target</span><br></pre></td></tr></table></figure>

<p>启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now bili_crawler.timer</span><br></pre></td></tr></table></figure>

<p>💡 小贴士：</p>
<ul>
<li>systemd比cron更强大，可以精确控制任务依赖、失败重启等。</li>
</ul>
<p>查看日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl -u bili_crawler.service  <span class="comment"># 看最近执行情况</span></span><br></pre></td></tr></table></figure>

<h2 id="监控与维护——别让脚本偷偷挂了！"><a href="#监控与维护——别让脚本偷偷挂了！" class="headerlink" title="监控与维护——别让脚本偷偷挂了！"></a>监控与维护——别让脚本偷偷挂了！</h2><p>自动化是爽，但如果脚本突然不工作了怎么办？</p>
<h3 id="1-日志检查"><a href="#1-日志检查" class="headerlink" title="1. 日志检查"></a>1. 日志检查</h3><p>如果用了cron，记得定期看日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/bili_cron.log  <span class="comment"># 实时监控</span></span><br></pre></td></tr></table></figure>

<p>如果日志太大，可以用logrotate自动切割：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/logrotate.d/bili_cron</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">/var/log/bili_cron.log &#123;</span><br><span class="line">    daily</span><br><span class="line">    rotate 7</span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    compress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-资源监控"><a href="#2-资源监控" class="headerlink" title="2. 资源监控"></a>2. 资源监控</h3><p>看Python脚本占多少内存&#x2F;CPU：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -p $(pgrep -f your_script.py)</span><br></pre></td></tr></table></figure>

<p>如果脚本跑太久，可能被系统杀掉，可以加个超时控制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> signal</span><br><span class="line">signal.alarm(<span class="number">60</span>)  <span class="comment"># 60秒后超时</span></span><br></pre></td></tr></table></figure>

<h3 id="3-异常报警"><a href="#3-异常报警" class="headerlink" title="3. 异常报警"></a>3. 异常报警</h3><p>最简单的方法：用mail命令发邮件（前提服务器配好了SMTP）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本挂了！快检查！&quot;</span> | mail -s <span class="string">&quot;B站爬虫报警&quot;</span> your@email.com</span><br></pre></td></tr></table></figure>

<p>进阶玩法：接入Prometheus + Grafana，或者直接用第三方监控（如UptimeRobot）。</p>
<h2 id="优化与扩展"><a href="#优化与扩展" class="headerlink" title="优化与扩展"></a>优化与扩展</h2><h3 id="优化方向："><a href="#优化方向：" class="headerlink" title="优化方向："></a>优化方向：</h3><ul>
<li><p>✅ 缓存机制：如果B站API有频率限制，可以加个<code>cache.json</code>，避免重复请求。</p>
</li>
<li><p>✅ 多线程&#x2F;异步：用<code>aiohttp</code>替代<code>requests</code>，让爬虫跑得更快！</p>
</li>
<li><p>✅ 数据备份：每天自动备份<code>data.json</code>，避免意外丢失：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> data.json data_$(<span class="built_in">date</span> +%Y%m%d).json</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="扩展玩法："><a href="#扩展玩法：" class="headerlink" title="扩展玩法："></a>扩展玩法：</h3><ul>
<li>🚀 接入数据库：SQLite（轻量）、MySQL（稳定）、MongoDB（灵活）任选。</li>
<li>🚀 API接口：用Flask&#x2F;FastAPI暴露数据，让其他程序也能调用。</li>
<li>🚀 可视化大屏：用Echarts搞个酷炫的实时数据看板！</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>简单吐槽一下逆天的wtt</title>
    <url>/2024/12/29/%E7%AE%80%E5%8D%95%E5%90%90%E6%A7%BD%E4%B8%80%E4%B8%8B%E9%80%86%E5%A4%A9%E7%9A%84wtt/</url>
    <content><![CDATA[<h1 id="WTT，你到底想干啥？"><a href="#WTT，你到底想干啥？" class="headerlink" title="WTT，你到底想干啥？"></a>WTT，你到底想干啥？</h1><p>最近，<strong>樊振东</strong>和<strong>陈梦</strong>主动退出乒乓球世界排名的新闻刷爆了乒乓球圈。作为两位现役最顶尖的选手，他们的退出引发了广大球迷的愤怒和吐槽。而导致这场闹剧的罪魁祸首，毫无疑问是<strong>WTT（世界乒乓球职业大联盟）</strong>的不合理赛事安排和积分制度！</p>
<hr>
<h2 id="一、赛事安排的不合理性"><a href="#一、赛事安排的不合理性" class="headerlink" title="一、赛事安排的不合理性"></a>一、赛事安排的不合理性</h2><p>WTT 的比赛安排让人摸不着头脑，简直是“压榨式”赛程：</p>
<ol>
<li><p><strong>频繁赛事，选手身体吃不消</strong><br>WTT 几乎每个月都有高密度的比赛，而选手必须奔赴世界各地参赛。每场比赛之间的间隔非常短，根本没有足够的时间让选手休整、恢复体能。樊振东此前就曾公开表示，这种赛程对身体和心理的消耗过大，甚至影响了训练质量。</p>
</li>
<li><p><strong>比赛地点分布不合理</strong><br>WTT 的比赛大多分布在世界各地，但有些比赛地的交通和条件十分不便。例如从亚洲到欧洲的赛事频繁切换，让选手频繁长途飞行，时差、疲劳接踵而至。乒乓球选手不是“超人”，这样折腾谁受得了？</p>
</li>
<li><p><strong>对顶级选手的不公平对待</strong><br>WTT 对顶级选手要求参赛的场次非常严格，但这些选手还肩负着国家队比赛任务（比如奥运会、世乒赛等），两者之间根本没有兼顾的可能性。相比之下，一些排名靠后的选手则因为参赛压力较小，能灵活选择赛事，反而得到了更多积分机会。</p>
</li>
</ol>
<hr>
<h2 id="二、荒谬的积分制度"><a href="#二、荒谬的积分制度" class="headerlink" title="二、荒谬的积分制度"></a>二、荒谬的积分制度</h2><p>WTT 的积分制度设计堪称“天花乱坠”，问题多到让人吐槽无力：</p>
<ol>
<li><p><strong>积分有效期过短</strong><br>WTT 的积分更新规则以自然年为周期，这意味着选手需要在短时间内频繁参赛来“保分”。一旦错过比赛，积分会迅速掉光，排名直接滑落。<strong>樊振东和陈梦作为顶级选手，不想因为不合理的积分机制被绑架，才选择退出排名。</strong></p>
</li>
<li><p><strong>小比赛积分过高，大比赛影响力被削弱</strong><br>一些低级别赛事的积分比例过高，而高含金量的比赛积分相对较少。这样的设计让一些顶级选手不得不被迫参加更多小比赛，而真正的大型赛事反而失去了应有的吸引力。</p>
</li>
<li><p><strong>积分对排名的僵化作用</strong><br>积分制度使得某些选手通过高频参赛就可以堆积排名，而真正实力强劲的选手，可能因为选择比赛较少而排名落后。这种“数量压过质量”的机制无疑是对乒乓球运动的不尊重！</p>
</li>
</ol>
<hr>
<h2 id="三、对乒乓球发展的负面影响"><a href="#三、对乒乓球发展的负面影响" class="headerlink" title="三、对乒乓球发展的负面影响"></a>三、对乒乓球发展的负面影响</h2><p>WTT 的这种赛事安排和积分制度，不仅让顶级选手不堪重负，还对乒乓球运动的长期发展造成了巨大威胁：</p>
<ol>
<li><p><strong>选手健康受损</strong><br>长期高强度的赛程让选手的身体和心理都面临巨大的压力，导致职业寿命缩短。樊振东、陈梦选择退出排名，很大程度上也是为了保护自己的健康。</p>
</li>
<li><p><strong>乒乓球的观赏性下降</strong><br>顶级选手被迫退出或缺席比赛，导致赛事的竞争水平下降，影响了比赛的观赏性和商业价值。观众看不到真正的强强对决，热情会逐渐流失。</p>
</li>
<li><p><strong>年轻选手成长受阻</strong><br>积分制度倾向于“参赛数量”，让年轻选手为了积分疲于奔命，无法安心训练提升自身实力。这将直接影响乒乓球未来的整体水平。</p>
</li>
</ol>
<hr>
<h2 id="四、写在最后"><a href="#四、写在最后" class="headerlink" title="四、写在最后"></a>四、写在最后</h2><p>作为乒乓球迷，我们希望 WTT 能够意识到问题的严重性，听取选手的意见，做出合理的调整。一个健康的职业比赛体系，应该以选手为核心，平衡赛事安排，优化积分规则，而不是让选手成为“赚钱机器”。</p>
<p>樊振东和陈梦的退出是一个警钟，也是对不合理机制的抗议。如果 WTT 再不改进，失去的可能不仅是选手，还有观众对乒乓球这项运动的热爱。</p>
<p><strong>WTT，别让乒乓球的未来毁在你手里！</strong></p>
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113548063670606&bvid=BV1RTzgYxE7U&cid=27037208099&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
      <categories>
        <category>吐槽</category>
        <category>乒乓球</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
        <tag>乒乓球</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔配置前后端分离项目</title>
    <url>/2025/03/27/%E5%AE%9D%E5%A1%94%E9%85%8D%E7%BD%AE%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="服务器-宝塔面板配置前后端分离项目"><a href="#服务器-宝塔面板配置前后端分离项目" class="headerlink" title="服务器 + 宝塔面板配置前后端分离项目"></a>服务器 + 宝塔面板配置前后端分离项目</h1><p>在搭建前后端分离项目时，我们通常会遇到一些挑战，尤其是在配置和部署过程中。作为前后端分离架构的实现者，如何将前端和后端分开部署、通过 Nginx 配置反向代理来保证两者的无缝衔接是必须掌握的一项技能。在本文中，我将分享一些在宝塔面板环境下配置前后端分离项目的经验和实践。</p>
<p>从前端打包的配置、后端部署到 Nginx 配置的反向代理，每一步都充满了坑，但也正是通过这些步骤，我们确保了项目在生产环境中的高效、稳定运行。希望这篇文章能帮助你少走弯路，节省一些调试时间，避免踩到我曾经踩过的那些雷。</p>
<p>前端和后端分离的架构让项目的可扩展性和维护性得到了很大提升，但也带来了诸如跨域请求、安全性、反向代理等一系列问题。希望通过这篇分享，大家能够更加顺利地完成部署，并获得更加顺畅的开发体验。</p>
<p>在进行前后端分离的项目部署时，涉及到前端打包、后端配置、以及反向代理等步骤。这里我将以一个 React 框架的前端项目为例，分享如何在宝塔面板下配置前后端分离项目。</p>
<h2 id="一、前端打包与配置"><a href="#一、前端打包与配置" class="headerlink" title="一、前端打包与配置"></a>一、前端打包与配置</h2><h3 id="1-1-打包准备"><a href="#1-1-打包准备" class="headerlink" title="1.1 打包准备"></a>1.1 打包准备</h3><p>在 React 项目中，默认情况下，使用 <code>BrowserRouter</code> 来处理路由，但是在部署到生产环境时，使用 <code>BrowserRouter</code> 会出现一些问题，尤其是在服务器没有配置路由重定向时。因此，建议在生产环境中使用 <code>HashRouter</code>，这样可以避免前端路由路径刷新时，导致的 404 错误。</p>
<h3 id="1-2-修改-React-路由"><a href="#1-2-修改-React-路由" class="headerlink" title="1.2 修改 React 路由"></a>1.2 修改 React 路由</h3><p>如果你使用的是 <code>BrowserRouter</code>，请将其更改为 <code>HashRouter</code>，修改方式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前：</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后：</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HashRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-修改-package-json"><a href="#1-3-修改-package-json" class="headerlink" title="1.3 修改 package.json"></a>1.3 修改 <code>package.json</code></h3><p>为了让 React 应用在根目录下正确部署，需要在 <code>package.json</code> 中添加 <code>homepage</code> 字段：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-打包前端"><a href="#1-4-打包前端" class="headerlink" title="1.4 打包前端"></a>1.4 打包前端</h3><p>运行以下命令进行打包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>此时，React 会生成一个 <code>build/</code> 文件夹，里面包含了所有的打包文件，包括 <code>index.html</code>、CSS、JavaScript 等。</p>
<h3 id="1-5-上传前端文件"><a href="#1-5-上传前端文件" class="headerlink" title="1.5 上传前端文件"></a>1.5 上传前端文件</h3><p>将 <code>build/</code> 文件夹中的所有文件上传到服务器。默认情况下，前端项目会部署在网站的根目录(你自己在宝塔面板里配置的)，通常是 <code>/www/wwwroot/</code> 下的一个子目录。</p>
<ul>
<li>例如，将 <code>build/</code> 中的文件上传到 <code>/www/wwwroot/history.nuyoahming.xyz/</code> 目录。</li>
<li>重点：确保设置里默认文件中有一个 <code>index.html</code> 文件，这是网站的入口文件。</li>
</ul>
<p>一旦文件上传并覆盖到服务器根目录下，你可以访问配置的域名，看看前端是否正常工作。</p>
<hr>
<h2 id="二、后端配置与部署"><a href="#二、后端配置与部署" class="headerlink" title="二、后端配置与部署"></a>二、后端配置与部署</h2><h3 id="2-1-上传后端代码"><a href="#2-1-上传后端代码" class="headerlink" title="2.1 上传后端代码"></a>2.1 上传后端代码</h3><p>在宝塔面板中，创建一个新的目录用于存放后端代码。你可以通过以下步骤来上传和解压后端代码：</p>
<ol>
<li>将后端代码上传到服务器指定目录（比如 <code>/www/wwwroot/backend/</code>）。</li>
<li>上传 <code>node_modules</code> 文件夹时，可以将它压缩成 <code>.tar.gz</code> 或 <code>.zip</code> 文件，上传完成后再解压。因为文件夹中可能有超过 1000 个文件，直接上传可能会导致上传失败。</li>
</ol>
<h3 id="2-2-安装-Node-js-和-NPM"><a href="#2-2-安装-Node-js-和-NPM" class="headerlink" title="2.2 安装 Node.js 和 NPM"></a>2.2 安装 Node.js 和 NPM</h3><ol>
<li>登录到服务器，通过 SSH 安装 Node.js 和 NPM：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Node.js (以安装 Node.js 14.x 版本为例)</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_14.x | bash -</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装完 Node.js 后，使用以下命令验证是否安装成功：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="2-3-安装-PM2"><a href="#2-3-安装-PM2" class="headerlink" title="2.3 安装 PM2"></a>2.3 安装 PM2</h3><p>为了确保后端能够一直运行，建议使用 PM2 来管理 Node.js 应用。PM2 是一个进程管理工具，它可以保持应用在后台运行，并且自动重启应用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>

<h3 id="2-4-启动后端服务"><a href="#2-4-启动后端服务" class="headerlink" title="2.4 启动后端服务"></a>2.4 启动后端服务</h3><p>进入到后端项目的根目录，启动后端应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure>

<p>此时，后端服务已经通过 PM2 启动并运行，可以通过 <code>pm2 list</code> 查看所有管理的进程。</p>
<h3 id="2-5-配置后端端口"><a href="#2-5-配置后端端口" class="headerlink" title="2.5 配置后端端口"></a>2.5 配置后端端口</h3><p>通常，后端应用会运行在 <code>3001</code> 或类似的端口上。确保后端服务监听正确的端口。</p>
<hr>
<h2 id="三、配置-Nginx-反向代理"><a href="#三、配置-Nginx-反向代理" class="headerlink" title="三、配置 Nginx 反向代理"></a>三、配置 Nginx 反向代理</h2><p>前后端分离应用通常是将前端和后端部署在同一服务器的不同端口上。为了使用户可以通过统一的域名访问 API，我们需要使用 Nginx 配置反向代理。</p>
<h3 id="3-1-配置反向代理"><a href="#3-1-配置反向代理" class="headerlink" title="3.1 配置反向代理"></a>3.1 配置反向代理</h3><p>假设前端应用通过 <code>https://域名</code> 访问，而后端服务在 <code>localhost:3001</code> 上运行，下面是 Nginx 配置文件的例子：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 将 /api/ 请求转发到后端服务</span></span><br><span class="line">    <span class="section">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:3001;  <span class="comment"># 后端 HTTP 服务</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;  <span class="comment"># 保留客户端的请求主机</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  <span class="comment"># 保留客户端真实 IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;  <span class="comment"># 保留转发的地址</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;  <span class="comment"># 保留协议（http 或 https）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-解释配置："><a href="#3-2-解释配置：" class="headerlink" title="3.2 解释配置："></a>3.2 解释配置：</h3><ol>
<li><strong>SSL 配置</strong>：配置了 SSL 证书，使得网站支持 HTTPS 协议，保证前后端通信的安全性。</li>
<li><strong>反向代理</strong>：<ul>
<li><code>location /api/ &#123; proxy_pass http://localhost:3001; &#125;</code>：将所有请求 <code>/api/</code> 的路径转发到 <code>localhost:3001</code>，也就是后端服务。</li>
<li><code>proxy_set_header</code>：这些指令确保将正确的请求头传递到后端。</li>
</ul>
</li>
<li><strong>静态文件配置</strong>：如果需要支持 PHP 或其他后端技术，Nginx 可以代理到相应的进程。</li>
<li><strong>敏感文件禁止访问</strong>：为了提高安全性，禁止访问 <code>.env</code>、<code>.git</code> 等敏感文件。</li>
</ol>
<h3 id="3-3-重载-Nginx-配置"><a href="#3-3-重载-Nginx-配置" class="headerlink" title="3.3 重载 Nginx 配置"></a>3.3 重载 Nginx 配置</h3><p>配置完 Nginx 后，记得重载 Nginx 使其生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nginx -s reload</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ol>
<li><p><strong>前端打包与部署</strong>：</p>
<ul>
<li>使用 <code>HashRouter</code> 避免刷新页面时出现 404 错误。</li>
<li>在 <code>package.json</code> 中添加 <code>&quot;homepage&quot;: &quot;.&quot;</code>，然后进行打包并上传到服务器。</li>
</ul>
</li>
<li><p><strong>后端部署</strong>：</p>
<ul>
<li>使用 PM2 来启动后端，确保后端服务一直运行。</li>
<li>后端服务运行在本地（如 <code>localhost:3001</code>），不需要暴露公网 IP。</li>
</ul>
</li>
<li><p><strong>Nginx 反向代理</strong>：</p>
<ul>
<li>配置 Nginx 将 <code>/api/</code> 路径的请求转发到后端服务，前端可以通过 HTTPS 安全访问 API。</li>
<li>配置 SSL 证书保证通信的安全性。</li>
</ul>
</li>
</ol>
<p>通过这种方式，前端和后端可以通过同一个域名进行通信，且不会遇到混合内容问题。同时，后端仍然可以在内网运行，提高了安全性。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>记录我第一次配置Android和react-native踩过的坑</title>
    <url>/2025/01/16/%E8%AE%B0%E5%BD%95%E6%88%91%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%85%8D%E7%BD%AEAndroid%E5%92%8Creact-native%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h3 id="前面全部按照React-Native中文版文档来，这没啥问题"><a href="#前面全部按照React-Native中文版文档来，这没啥问题" class="headerlink" title="前面全部按照React-Native中文版文档来，这没啥问题"></a>前面全部按照React-Native中文版文档来，这没啥问题</h3><h3 id="先启动AVD-顺序别搞错了"><a href="#先启动AVD-顺序别搞错了" class="headerlink" title="先启动AVD,顺序别搞错了"></a>先启动AVD,顺序别搞错了</h3><h3 id="使用-npm-运行-React-Native-项目"><a href="#使用-npm-运行-React-Native-项目" class="headerlink" title="使用 npm 运行 React Native 项目"></a>使用 npm 运行 React Native 项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run android</span><br></pre></td></tr></table></figure>



<h3 id="遇到如下问题"><a href="#遇到如下问题" class="headerlink" title="遇到如下问题"></a>遇到如下问题</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info Installing the app...</span><br><span class="line">Downloading https://services.gradle.org/distributions/gradle-8.10.2-all.zip </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info 💡 Tip: Make sure that you have <span class="built_in">set</span> up your development environment correctly, by running npx react-native doctor. To <span class="built_in">read</span> more about doctor <span class="built_in">command</span> visit: https://github.com/react-native-community/cli/blob/main/packages/cli-doctor/README.md#doctor </span><br><span class="line"></span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.io.IOException: Downloading from https://services.gradle.org/distributions/gradle-8.10.2-all.zip  failed: <span class="built_in">timeout</span> (10000ms)</span><br><span class="line">        at org.gradle.wrapper.Install.forceFetch(SourceFile:4)</span><br><span class="line">        at org.gradle.wrapper.Install<span class="variable">$1</span>.call(SourceFile:8)</span><br><span class="line">        at org.gradle.wrapper.GradleWrapperMain.main(SourceFile:67)</span><br><span class="line">Caused by: java.net.SocketTimeoutException: Connect timed out</span><br><span class="line">        at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:546)</span><br><span class="line">        at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:597)</span><br><span class="line">        at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)</span><br><span class="line">        at java.base/java.net.Socket.connect(Socket.java:633)</span><br><span class="line">        at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:299)</span><br><span class="line">        at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:178)</span><br><span class="line">        at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:498)</span><br><span class="line">        at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:603)</span><br><span class="line">        at java.base/sun.net.www.protocol.https.HttpsClient.&lt;init&gt;(HttpsClient.java:266)</span><br><span class="line">        at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:380)</span><br><span class="line">        at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:189)</span><br><span class="line">        at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1242)</span><br><span class="line">        at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1128)</span><br><span class="line">        at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:175)</span><br><span class="line">        at java.base/sun.net.www.protocol.http.HttpURLConnection.followRedirect0(HttpURLConnection.java:2887)</span><br><span class="line">        at java.base/sun.net.www.protocol.http.HttpURLConnection.followRedirect(HttpURLConnection.java:2796)</span><br><span class="line">        at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1927)</span><br><span class="line">        at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1589)</span><br><span class="line">        at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:224)</span><br><span class="line">        at org.gradle.wrapper.Install.forceFetch(SourceFile:2)</span><br><span class="line">        ... 2 more</span><br></pre></td></tr></table></figure>

<p>我不知道啊，报错说是在尝试下载 Gradle 8.10.2 版本时出现了超时问题，于是打开搜索引擎。。。</p>
<p>上面说把gradle-wrapper.properties这个文件内容改成如下内容</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=<span class="keyword">wrapper</span>/dists</span><br><span class="line">distributionUrl=https\://mirrors.cloud.tencent.com/gradle/gradle<span class="number">-8.10</span><span class="number">.2</span>-<span class="keyword">all</span>.zip</span><br><span class="line">networkTimeout=<span class="number">10000</span></span><br><span class="line">validateDistributionUrl=<span class="keyword">true</span></span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=<span class="keyword">wrapper</span>/dists</span><br><span class="line"></span><br><span class="line">//我看的大概意思是换源，第三行改成你自己的gradle的版本号，这行字删掉</span><br></pre></td></tr></table></figure>

<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Starting a Gradle Daemon (subsequent builds will be faster)</span><br><span class="line"></span><br><span class="line">info 💡 Tip: Make sure that you have <span class="built_in">set</span> up your development environment correctly, by running npx react-native doctor. To <span class="built_in">read</span> more about doctor <span class="built_in">command</span> visit: https://github.com/react-native-community/cli/blob/main/packages/cli-doctor/README.md#doctor </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* Where:</span><br><span class="line">Settings file <span class="string">&#x27;D:\EduLibrary\OurEDA\ReactNativeApp\android\settings.gradle&#x27;</span> line: 2</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Error resolving plugin [<span class="built_in">id</span>: <span class="string">&#x27;com.facebook.react.settings&#x27;</span>]</span><br><span class="line">&gt; java.io.UncheckedIOException: Could not move temporary workspace (D:\EduLibrary\OurEDA\ReactNativeApp\android\.gradle\8.6\dependencies-accessors\569c8b261a8a714d7731d5f568e0e5c05babae10-8ac2f4cd-268f-435d-94f6-418a4ae4fc61) to immutable location (D:\EduLibrary\OurEDA\ReactNativeApp\android\.gradle\8.6\dependencies-accessors\569c8b261a8a714d7731d5f568e0e5c05babae10)</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">&gt; Run with --stacktrace option to get the stack trace.</span><br><span class="line">&gt; Run with --info or --debug option to get more <span class="built_in">log</span> output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line">&gt; Get more <span class="built_in">help</span> at https://help.gradle.org. </span><br><span class="line"></span><br><span class="line">BUILD FAILED <span class="keyword">in</span> 1m 18s</span><br><span class="line">info Run CLI with --verbose flag <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure>

<p>我不知道啊，报错说是在构建 React Native 项目时，Gradle 遇到了一个异常，导致构建失败。具体来说，错误发生在 <code>settings.gradle</code> 文件的第 2 行，涉及到一个插件解析问题。于是打开搜索引擎。。。但没什么发现。。。nm</p>
<p>打开这个什么文件的第2行。。？facebook？。。OK，打开梯子，下载完成。。。nm</p>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info 💡 Tip: Make sure that you have <span class="built_in">set</span> up your development environment correctly, by running npx react-native doctor. To <span class="built_in">read</span> more about doctor <span class="built_in">command</span> visit: https://github.com/react-native-community/cli/blob/main/packages/cli-doctor/README.md#doctor </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring project <span class="string">&#x27;:app&#x27;</span>.</span><br><span class="line">&gt; com.android.builder.sdk.InstallFailedException: Failed to install the following SDK components:</span><br><span class="line">      ndk;26.1.10909125 NDK (Side by side) 26.1.10909125</span><br><span class="line">  Install the missing components using the SDK manager <span class="keyword">in</span> Android Studio.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">&gt; Run with --stacktrace option to get the stack trace.</span><br><span class="line">&gt; Run with --info or --debug option to get more <span class="built_in">log</span> output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line">&gt; Get more <span class="built_in">help</span> at https://help.gradle.org. </span><br><span class="line"></span><br><span class="line">BUILD FAILED <span class="keyword">in</span> 7m 47s</span><br><span class="line">error Failed to install the app. Command failed with <span class="built_in">exit</span> code 1: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081 FAILURE: Build failed with an exception. * What went wrong: A problem occurred configuring project <span class="string">&#x27;:app&#x27;</span>. &gt; com.android.builder.sdk.InstallFailedException: Failed to install the following SDK components: ndk;26.1.10909125 NDK (Side by side) 26.1.10909125 Install the missing components using the SDK manager <span class="keyword">in</span> Android Studio. * Try: &gt; Run with --stacktrace option to get the stack trace. &gt; Run with --info or --debug option to get more <span class="built_in">log</span> output. &gt; Run with --scan to get full insights. &gt; Get more <span class="built_in">help</span> at https://help.gradle.org.  BUILD FAILED <span class="keyword">in</span> 7m 47s.</span><br><span class="line">info Run CLI with --verbose flag <span class="keyword">for</span> more details.</span><br><span class="line">PS D:\EduLibrary\OurEDA\ReactNativeApp&gt;</span><br></pre></td></tr></table></figure>

<p>我不知道啊，报错说是在构建 React Native 项目时，Gradle 遇到了一个异常，导致构建失败。具体来说，错误信息指出项目 <code>:app</code> 在配置过程中遇到了问题，原因是缺少必要的 SDK 组件(ndk;26.1.10909125组件，这是啥我不知道，下呗)。。。</p>
<ul>
<li>在 SDK 管理器中，切换到 <code>SDK Tools</code> 选项卡。</li>
<li>勾选 <code>NDK (Side by side)</code>，并确保版本 <code>26.1.10909125</code> 被选中。</li>
<li>点击 <code>OK</code> 按钮，开始安装缺失的组件。</li>
</ul>
<h3 id="梯子保持打开不要动，慢慢等进度条跑到100-，然后发现可以热处理了，成功了！兄弟们NB啊哈哈哈哈！第一次构建会很慢，后来就快多了-666。"><a href="#梯子保持打开不要动，慢慢等进度条跑到100-，然后发现可以热处理了，成功了！兄弟们NB啊哈哈哈哈！第一次构建会很慢，后来就快多了-666。" class="headerlink" title="梯子保持打开不要动，慢慢等进度条跑到100%，然后发现可以热处理了，成功了！兄弟们NB啊哈哈哈哈！第一次构建会很慢，后来就快多了,666。"></a>梯子保持打开不要动，慢慢等进度条跑到100%，然后发现可以热处理了，成功了！兄弟们NB啊哈哈哈哈！第一次构建会很慢，后来就快多了,666。</h3>]]></content>
      <categories>
        <category>安卓</category>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>安卓</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>右键新建excel文件打开失败的问题</title>
    <url>/2025/06/25/%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BAexcel%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="遭遇"><a href="#遭遇" class="headerlink" title="遭遇"></a>遭遇</h1><p>最近要做个表格，新建了一个xlsx文件，结果告诉我文件格式错误打不开！wk？</p>
<h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><p>排查问题之后发现 只有新建“Microsoft Excel 工作表”时会出现这种问题，新建“Word”、“PPT”等文件都没有问题，单独打开Excel在里边选择新建工作表也没问题，独独右键新建的文件出问题。</p>
<p>由于之前安装过WPS（后来又卸载了），我开始怀疑又是这个出生搞的鬼，是它又把我注册表篡改了？</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>按WIN+R，运行regedit，打开注册表编辑器，然后在HKEY_CLASSES_ROOT下找到.xls和.xlsx</p>
<p>然后又打开.xlsx下边的ET.Xls.6下边的ShellNew，发现这里的FileName的值也是WPS的，放的是之前WPS的模板路径，将路径复制到文件资源管理器打开，发现找不到路径。这个时候心里已经大致知道咋回事了。然后打开Excel.Sheet.12下边的ShellNew，老样子，赋值FileName的值，发现打开了，打开的是一个空白的Excel文件，文件名：excel12.xlsx，这个应该就是Excel的模板文件了，将这个路径复制粘贴到ET.Xls.6下边的ShellNew的FileName，将原来的值修改为</p>
<p><code>C:\Program Files\Microsoft Office\Root\VFS\Windows\ShellNew\excel12.xlsx（这个填入你自己的Excel路径）</code>，OK，返回桌面，右键&gt;新建&gt;Microsoft Excel 工作表 ,双击顺利打开！！！</p>
<p>原因就是之前新建“Microsoft Excel 工作表”的时候，模板是用的WPS的模板，但是这个模板已经找不到了，所以新建的工作表就有问题，导致Excel打不开。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行git命令使用卡顿</title>
    <url>/2025/08/08/%E5%91%BD%E4%BB%A4%E8%A1%8Cgit%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%8D%A1%E9%A1%BF/</url>
    <content><![CDATA[<p>最近Windows更新后Vitis编译慢、Keil编译慢，git卡顿，C&#x2F;C++编译器编译慢，而且相同的性能大幅下降还体现在vscode以及其他的ide中，打开任务管理器，发现CPU在编译时只有一个核被占用，猜测可能是Windows的更新对多核编译的调度策略产生了影响，经过反复的尝试，结合 <a href="https://blog.gitcode.com/044eb92e5985294e320d024aaf26325e.html" title="访问GitCode">ESP-IDF在Windows 11 24H2系统下的编译性能问题分析与解决方案 - GitCode博客</a> ，发现问题出在MSPCManager Service这个服务上面。</p>
<h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><h2 id="1-终止MSPCManagerService-exe进程："><a href="#1-终止MSPCManagerService-exe进程：" class="headerlink" title="1. 终止MSPCManagerService.exe进程："></a>1. 终止MSPCManagerService.exe进程：</h2><p>打开任务管理器<br>在”详细信息”选项卡中找到MSPCManagerService.exe<br>右键选择”结束任务”</p>
<h2 id="2-禁用Microsoft-PC-Manager服务："><a href="#2-禁用Microsoft-PC-Manager服务：" class="headerlink" title="2. 禁用Microsoft PC Manager服务："></a>2. 禁用Microsoft PC Manager服务：</h2><p>按下Win+R，输入<code>services.msc</code>打开服务管理器<br>找到”Microsoft PC Manager”服务<br>右键选择”属性”，将启动类型改为”禁用”<br>点击”停止”按钮立即停止服务</p>
<h2 id="3-卸载Microsoft-PC-Manager"><a href="#3-卸载Microsoft-PC-Manager" class="headerlink" title="3. 卸载Microsoft PC Manager"></a>3. 卸载Microsoft PC Manager</h2><p>在Windows11的设置中，卸载Microsoft PC Manager。</p>
<h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><p>经过修复之后，vitis、keil、gcc的编译速度大幅加快，恢复到原有水平。    </p>
<p><img src="/images/git%E5%8F%8D%E5%BA%94%E6%85%A2%E7%AD%89%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png" alt="参考图片" title="参考图片"><br>参考图片</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>简单粗暴解决 Markdown All in One 插件相关问题</title>
    <url>/2025/08/08/%E7%AE%80%E5%8D%95%E7%B2%97%E6%9A%B4%E8%A7%A3%E5%86%B3-Markdown-All-in-One-%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="删除、回车反应慢"><a href="#删除、回车反应慢" class="headerlink" title="删除、回车反应慢"></a>删除、回车反应慢</h1><p>直接进入Markdown All in One的快捷键配置，删除delete和enter的相应快捷方式，这样应该能解决大部分这类问题。</p>
<h1 id="复制时转圈"><a href="#复制时转圈" class="headerlink" title="复制时转圈"></a>复制时转圈</h1><p>你懂的，程序员的Ctrl C  Ctrl V使用不了是一件非常令人恼火的事情。</p>
<h2 id="初步办法"><a href="#初步办法" class="headerlink" title="初步办法"></a>初步办法</h2><p>我的建议是，试试看把Markdown All in One卸载重启等<br>如果还是解决不了，那么看下面</p>
<h2 id="调整设置"><a href="#调整设置" class="headerlink" title="调整设置"></a>调整设置</h2><p>取消选择控制是否可以以不同的方式粘贴内容，按图操作，取消勾选<br><img src="/images/md-1.1.png" alt="图片" title="图一"><br><img src="/images/md-1.2.png" alt="图片" title="图二"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在DataGrip中导入SQL文件</title>
    <url>/2025/08/14/%E5%A6%82%E4%BD%95%E5%9C%A8DataGrip%E4%B8%AD%E5%AF%BC%E5%85%A5SQL%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<ol>
<li><p>直接将文件拖进去<br>可以采取直观的方式操作，只需直接将所需的SQL文件拖拽至DataGrip工作区。鼠标右键点击已导入的文件，选择执行（运行）命令。</p>
<p> 要导入的 .sql文件</p>
</li>
</ol>
<p><img src="/images/1database%E5%AF%BC%E5%85%A5sql%E8%84%9A%E6%9C%AC-1.png" alt="图片" title="图片"></p>
<ol start="2">
<li><p>在数据库中准备测试的数据库<br><img src="/images/1database%E5%AF%BC%E5%85%A5sql%E8%84%9A%E6%9C%AC-2.png" alt="图片" title="图片"></p>
</li>
<li><p>直接将文件拖进去<br>可以采取直观的方式操作，只需直接将所需的SQL文件拖拽至DataGrip工作区。鼠标右键点击已导入的文件，选择执行（运行）命令。</p>
</li>
<li><p>记得运行之前要选择哪个数据库<br>接下来的关键步骤是确定目标数据库位置，在执行SQL文件前，系统会提示您选择要将运行结果保存在哪个数据源下的数据库中。（右键打开、或者快捷键打开）<br><img src="/images/1database%E5%AF%BC%E5%85%A5sql%E8%84%9A%E6%9C%AC-3.png" alt="图片" title="图片"><br>在完成目标数据源的选择后，点击“运行”按钮，DataGrip将开始执行SQL脚本并导入数据。<br><img src="/images/1database%E5%AF%BC%E5%85%A5sql%E8%84%9A%E6%9C%AC-4.png" alt="图片" title="图片"></p>
</li>
<li><p>最后，验证导入结果，您会在所选数据源对应的数据库内看到刚刚运行导入操作所产生的表结构及数据，从而确保整个过程顺利完成。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
